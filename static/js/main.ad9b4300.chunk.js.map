{"version":3,"sources":["components/RecordingTile.js","components/ListRecording.js","components/TextList.js","App.js","reportWebVitals.js","index.js"],"names":["RecordingTile","props","title","nameRecord","id","className","onClick","noteBook","JSON","parse","localStorage","document","getElementById","innerHTML","value","ListRecording","map","i","TextList","contenteditable","autofocus","saveRecord","newRecord","deleteRecord","undefined","jsonRecord","stringify","testName","setItem","record","nameList","push","App","useState","sort","count","setCount","nameCheckRecord","defaultName","prompt","indexOf","window","confirm","saveText","includes","concat","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6KA2BeA,MAzBf,SAAuBC,GAarB,OACE,qBACEC,MAAOD,EAAME,WACbC,GAAIH,EAAME,WACVE,UAAU,gBACVC,QAdJ,WACE,IAAMC,EAAWC,KAAKC,MAAMC,aAAY,UAExCC,SAASC,eACP,aAAaC,UAAYZ,EAAME,WACjCQ,SAASC,eACP,eAAeE,MAAQP,EAASN,EAAME,aAIxC,SAMCF,EAAME,cCNIY,MAbf,SAAuBd,GACrB,OACE,sBAAKI,UAAU,oBAAf,UACE,oBAAIA,UAAU,oBAAd,kDAIEJ,EAAME,WAAWa,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAed,WAAYc,SALlB,wBC0C5BC,MA7Cf,SAAkBjB,GAEhB,OACE,sBAAKI,UAAU,WAAf,UAEI,oBACEA,UAAU,eACVD,GAAG,YACHe,gBAAgB,OAHlB,iFAQA,0BACAd,UAAU,YACVD,GAAG,cACHgB,WAAS,IAIT,wBACEd,QAASL,EAAMoB,WACfhB,UAAU,SAFZ,oEAOA,wBACEC,QAASL,EAAMqB,UACfjB,UAAU,SAFZ,iFAOA,wBACEC,QAASL,EAAMsB,aACflB,UAAU,SAFZ,iGC5BR,QAAiCmB,IAA7Bd,aAAY,SAA4B,CAC1C,IAGIe,EAAajB,KAAKkB,UAHN,CACdC,SAAU,wEAGZjB,aAAakB,QAAQ,WAAYH,GAInC,IAAII,EAASrB,KAAKC,MAAMC,aAAY,UAChCoB,EAAW,GAEf,IAAK,IAAI3B,KAAc0B,EACpBC,EAASC,KAAK5B,GAoGF6B,MA/Ff,WAEE,MAA0BC,mBAASH,EAASI,QAA5C,mBAAOC,EAAP,KAAcC,EAAd,KAqEA,SAASd,IACPX,SAASC,eAAe,aAAaC,UAAa,sEAClDF,SAASC,eAAe,eAAeE,MAAQ,GAKjD,OACE,gCACE,qBAAKT,UAAU,gBACf,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CACEF,WAAYgC,EAAMD,SAEpB,cAAC,EAAD,CACEb,WAnER,WAEE,IAdiBgB,EAcbC,EAAc3B,SAASC,eAAe,aAAaC,UACnDV,EAAaoC,OAAO,6HAA0BD,GAalD,IAV8B,KAlBbD,EAkBHlC,GAjB0B,IAApCgC,EAAMK,QAAQH,MAoBV,IAFFI,OAAOC,QAAP,wOAC2CvC,EAD3C,QAIFA,EAAa,MAKC,MAAdA,EAAmB,CACrB,IAAI0B,EAASrB,KAAKC,MAAMC,aAAY,UAChCiC,EAAWhC,SAASC,eAAe,eAAeE,MAEtDe,EAAO1B,GAAcwC,EACrBjC,aAAY,SAAeF,KAAKkB,UAAUG,IAIJ,IAFvBM,EAEFS,SAASzC,IACpBiC,EAASD,EAAMU,OAAO1C,MA0CpBmB,UAAWA,EACXC,aAnCR,WACE,IAAIe,EAAc3B,SAASC,eAAe,aAAaC,UAEvD,IAEQ,IAFJ4B,OAAOC,QAAP,0MACwCJ,EADxC,MAES,CAEX,IAAIT,EAASrB,KAAKC,MAAMC,aAAY,iBAC7BmB,EAAOS,GACd5B,aAAY,SAAeF,KAAKkB,UAAUG,GAE1CO,EAASD,EAAMW,QAAO,SAAA7B,GAAC,OAAIA,IAAMqB,MACjChB,eC/ESyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,SAM1BmC,K","file":"static/js/main.ad9b4300.chunk.js","sourcesContent":["import React from 'react'\n\nfunction RecordingTile(props) {\n\n  // Функция которая открывает запись если кликнуть по ней.\n\n  function openRecord(){\n    const noteBook = JSON.parse(localStorage[\"noteBook\"])      \n    \n    document.getElementById(                                   \n      'headingId').innerHTML = props.nameRecord;\n    document.getElementById(                                   \n      'textFieldId').value = noteBook[props.nameRecord];\n  };\n\n  return(\n    <div                                                        \n      title={props.nameRecord}\n      id={props.nameRecord} \n      className='recordingTile'\n      onClick={openRecord}\n    >\n    {props.nameRecord}                                         \n    </div>\n  )\n}\n\nexport default RecordingTile;","import React from 'react';\nimport RecordingTile from './RecordingTile';                          \n\nfunction ListRecording(props) {\n  return (\n    <div className=\"ListRecordingMain\" key=\"idListRecordingMain\">\n      <h1 className=\"headListRecording\">                              \n        Записи\n      </h1>\n      {\n        props.nameRecord.map(i => <RecordingTile nameRecord={i}/>)   \n      }\n    </div>\n  )\n};\n\nexport default ListRecording; ","import React from 'react'\n\nfunction TextList(props){\n\n  return (\n    <div className=\"TextList\">\n\n        <h1                            \n          className=\"headTextList\" \n          id=\"headingId\" \n          contenteditable=\"true\"\n        >\n          Новая запись\n        </h1>\n\n        <textarea                     \n        className=\"textField\"\n        id=\"textFieldId\"\n        autofocus\n        >\n        </textarea>\n\n        <button                       \n          onClick={props.saveRecord} \n          className=\"batton\"\n        >\n          Сохранить\n        </button>\n\n        <button                        \n          onClick={props.newRecord} \n          className=\"batton\"\n        >\n          Новая запись\n        </button>\n\n        <button                        \n          onClick={props.deleteRecord} \n          className=\"batton\"\n        >\n          Удалить запись\n        </button>\n\n    </div>\n  )\n};\n\nexport default TextList;","import React, { useState } from 'react'\nimport ListRecording from './components/ListRecording';  \nimport TextList from './components/TextList';            \n\n//    Создание и проверка наличия переменной для хранения записей в локальном \n// хранилище. Если в локальном хранилище уже есть элемент который хранит \n// записи, то этот этап пропускается, если нет то создается новый \n// элемент с одной тестовой записью.\nif (localStorage[\"noteBook\"] === undefined) {\n  let objRecord = {\n    testName: \"просто текст\"\n  };\n  let jsonRecord = JSON.stringify(objRecord);\n  localStorage.setItem(\"noteBook\", jsonRecord) \n};\n\n  \nlet record = JSON.parse(localStorage[\"noteBook\"]); \nlet nameList = [];                                 \n\nfor (var nameRecord in record){\n   nameList.push(nameRecord);\n };\n\n// -----------------------------------------------------------------------\n\nfunction App() {\n\n  const [count, setCount] = useState(nameList.sort());                \n  \n  // Функция проверки имени в списке записей.\n  // Возвращает false если записи нет или true если есть.\n\n  function checkName(nameCheckRecord){\n    if (count.indexOf(nameCheckRecord) === -1){\n      return false\n    } else {\n      return true\n    };\n      \n  }\n\n  //    Функция сохраниния записи, также используется для редактирования новых записей \n  // путем сохраниения новых данных поверх предыдущих. Функция передается в элемент TextList.\n\n  function saveRecord() {                                             \n    // Получения имени новой записи от пользователя. \n    let defaultName = document.getElementById('headingId').innerHTML;\n    let nameRecord = prompt(\"Ведите название записи\", defaultName);\n    \n    // Проверка есть ли уже запись с таким именем. \n    if (checkName(nameRecord) === true){                              \n      if (window.confirm(                                               \n        `Вы уверены что хотите перезаписать запись ${nameRecord}?`     \n      ) === false){\n        // задается значение null чтобы дальше функция не пошла.\n        nameRecord = null;                                            \n      }                                                                \n    };\n\n    // if проверяет не нажал ли пользователь отмену в prompt.\n    if (nameRecord != null){                                          \n      let record = JSON.parse(localStorage[\"noteBook\"]);              \n      let saveText = document.getElementById('textFieldId').value;    \n\n      record[nameRecord] = saveText;                                   \n      localStorage[\"noteBook\"] = JSON.stringify(record);               \n      \n      let listName = count;\n\n      if (listName.includes(nameRecord) === false){                  \n        setCount(count.concat(nameRecord));                           \n      };                                                             \n    };  \n  };\n\n  // Функция удаления записи для передачи и использования в TextList.\n  // Удаляет активную запись.\n\n  function deleteRecord(){\n    let defaultName = document.getElementById('headingId').innerHTML;\n  \n    if (window.confirm(                                               \n        `Вы уверены что хотите удалить запись ${defaultName}?`\n      ) === true){\n        \n      let record = JSON.parse(localStorage[\"noteBook\"]);               \n      delete record[defaultName]                                       \n      localStorage[\"noteBook\"] = JSON.stringify(record);               \n\n      setCount(count.filter(i => i !== defaultName));                 \n      newRecord();                                                    \n    };\n  };\n  \n  // Функция создания новой записи для использования в TextList.\n\n  function newRecord(){\n    document.getElementById('headingId').innerHTML  = 'Новая запись';  \n    document.getElementById('textFieldId').value = '';                 \n  };\n\n  // ------------------------------------------------------------------\n  \n  return (\n    <div>\n      <div className='styleHeader'></div>\n      <div className='styleBackground' >\n        <ListRecording                                                \n          nameRecord={count.sort()}                                   \n        />                                                            \n        <TextList                                                     \n          saveRecord={saveRecord}                                     \n          newRecord={newRecord}                                        \n          deleteRecord={deleteRecord}                                  \n        />\n      </div> \n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}